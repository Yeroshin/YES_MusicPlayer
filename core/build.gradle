plugins {
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.kotlinKapt)
    alias(libs.plugins.devtoolsKsp)
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 21//19
        targetSdk 33
        // multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        ndkVersion = "25.2.9519653"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding = true
    }
    namespace 'com.yes.core'
}

dependencies {
    implementation project(path: ':coreUI')
    // androidTestImplementation 'androidx.multidex:multidex:2.0.1'
//vosk
    implementation 'net.java.dev.jna:jna:5.13.0@aar'
    implementation 'com.alphacephei:vosk-android:0.3.47@aar'
////////////////
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.material
    //viewModel
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.fragment.ktx
    //testImplementation 'junit:junit:4.13.2'
   // androidTestImplementation 'androidx.test.ext:junit:1.1.5'
   // androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //Shit for mockk to run on api<p
    //implementation 'com.github.tmurakami:dexopener:2.0.5'
    implementation libs.espresso.idling.resource

    //room
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    //Dagger/////////////////////
    implementation libs.dagger
    androidTestImplementation libs.dagger
    kapt libs.dagger.compiler

    //Preferences DataStore
    implementation libs.androidx.datastore.preferences
    androidTestImplementation libs.androidx.datastore.preferences.core
    androidTestImplementation libs.androidx.preference.ktx

    //  implementation libs.media3//tmp
    implementation libs.androidx.media3.session
    implementation libs.androidx.media3.exoplayer
    implementation libs.androidx.media3.exoplayer.dash
    implementation libs.androidx.media3.ui



}
tasks.register('genUUID') {
    def uuid = UUID.randomUUID().toString()
    def odir = file("$buildDir/generated/assets/model")
    def ofile = file("$odir/uuid")
    doLast {
        mkdir odir
        ofile.text = uuid
    }
}

preBuild.dependsOn(genUUID)